NOTE: The In-app Purchase API does not work on Android emulator or iOS Simulator.
    - On Android you need to previously sign in to your device with the developer account: app@mobilesorcery.com
    ( Set it as the primary account, you need to do a factory reset if you have another primary account).

Test case 1: The user tries to buy a product, but does not set the public key. Expected result:
    - Android maPurchaseRequest fails with errorCode = MA_PURCHASE_ERROR_PUBLIC_KEY_NOT_SET.
    - iOS: do not run test.
    NOTE Test1 must run before Test3 because the public key gets set in Test2.

Test case 2: The user makes a valid purchase. ( public key is set starting from this point)
Receipt's fields are also verified.

Test case3: The user tries to buy an unavailable product using the wrapper.  Expected result:
	- event MA_PURCHASE_RES_UNAVAILABLE on devices with no billing support.
	- iOS: maPurchaseCreate fails with MA_PURCHASE_STATE_PRODUCT_INVALID event.
	- Android: maPurchaseRequest fails with event type MA_PURCHASE_STATE_FAILED and errorCode = MA_PURCHASE_ERROR_INVALID_PRODUCT.

Test case 4: Create new purchase object. Get productName and verify it.

Test case 5: Create new purchase object. Call verifyReceipt without previously buying the product. Expected result:
	- event state = MA_PURCHASE_STATE_RECEIPT_ERROR, errorCode = MA_PURCHASE_ERROR_NO_RECEIPT.

Test case 6: VerifyReceipt for an item that cannot be purchased.
	-IOS:
		1. Create new purchase object.
		2. Validation fails, fails because the item is not available: receive event productInvalid.
		3. Call verifyReceipt and check the error event.
		Expected event: receiptError, with errorCode = MA_PURCHASE_ERROR_NO_RECEIPT.
    - ANDROID:
		1. Create new purchase object.
		2. Try to buy the item, purchase fails because the item is not available: receive
		event requestFailed with error code MA_PURCHASE_ERROR_INVALID_PRODUCT.
		3. Call verifyReceipt and check the error event.
		Expected event: receiptError, with errorCode = MA_PURCHASE_ERROR_NO_RECEIPT.

Test case 7: Test checkPurchaseSupported. Expected result: call returns MA_PURCHASE_RES_OK.

Test case : RestoreTransactions with no public key set.  ( Move this before Test3 )
	- IOS: do not run test.
	- Android: restoreTransactions fails, expected event: purchaseRestoreError with errorCode = MA_PURCHASE_ERROR_PUBLIC_KEY_NOT_SET.

Test case 8: Create two products using the same product handle.
            Expected result: the second product should receive an purchase
            event with MA_PURCHASE_STATE_DUPLICATE_HANDLE as state.

Test case 9 Test maPurchaseGetName() syscall with a small buffer size.
            MA_PURCHASE_RES_BUFFER_TOO_SMALL error should be returned.

Test case 11:
	 - Refunded product, only on Android.
