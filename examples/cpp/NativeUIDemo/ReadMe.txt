The NativeUIDemo example application demonstrates many of the
important features of MoSync's NativeUI system, which is based
on the Widget API.

The Widget API enables applications to use the native UI look
and feel on both iOS and Android (and on future platforms on
which the Widget API will be supported).

This example shows how to use various native widgets (UI
components) in a MoSync application, and highlights techniques
that are important when developing cross-platform applications.

The main UI widget in the application is a TabScreen, which has
three screens (tabs):

* Colors screen (ScreenColorList.h/cpp) - demonstrates a ListView
  and a StackScreen.

* Images screen (ScreenImageSwiper.h/cpp) - demonstrates a custom
  view for an image swiper composed of several widgets.

* Web View screen (ScreenWebView.h/cpp) - demonstrates a Web widget.

Ii uses NativeUI library, a class library that illustrates
how to wrap the low-level widget API in a higher-level, object
oriented framework, which simplifies UI development.

For the full documentation of the MoSync NativeUI, see the
documentation in the package for the include file IX_WIDGET.h
and the overview for the Widget API:
http://www.mosync.com/files/imports/doxygen/latest/html/group___widget_a_p_i.html

Some techniques demonstrated by the example:

* Use of a single code base with slightly different UIs
  to target different platforms and form factors - the
  application is designed to work on both iOS and Android,
  but also to work on both tablets and phones.
  See for example method Util::isAndroid() and
  its use in method ScreenColorList::createUI().

* How to manage events generated by the Widget API.
  See method WidgetManager::customEvent().

* Using the stack screen mechanism to manage navigation
  between different screens within the application.
  See classes ScreenColorList and StackScreen.

* How to specify image resources for different screen
  resolutions as unloaded binary resources (.ubin).
  These are only loaded into memory when used.
  See file Resources/Resources.lst
  (Note that resource files can be placed anywhere in
  the project's file system, and be named anything that
  has an .lst extension.)

* How to use placeholders in the resource file (.placeholder)
  to be able to loop over a range fo resources.
  See file Resources/Resources.lst and the method
  ScreenImageSwiper::loadImages().

* How to specify string data as part of resource data.
  See the use of .pstring in file Resources/Resources.lst
  and method ScreenImageSwiper::readStringFromResource().
