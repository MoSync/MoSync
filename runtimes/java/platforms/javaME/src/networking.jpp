/* Copyright (C) 2009 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

#include "networking.h"

NETSYSCALL(MAHandle) maConnect(final String url) {
	DEBUG_CONN("Connect "+mConnNextHandle+" "+url+"\n");
	if(mConnections.size() >= CONN_MAX)
		return CONNERR_MAX;
	if(url.startsWith("socket://:") || url.equals("socket://") ||
		url.startsWith("btspp://localhost:"))
	{
		MAServerConn mac = new MAServerConn(mConnNextHandle);
		try {
			mac.notifier = (StreamConnectionNotifier)Connector.open(url);
		} catch(IOException e) {
			PRINT_STACK_TRACE;
			return CONNERR_GENERIC;
		} catch(SecurityException e) {
			PRINT_STACK_TRACE;
			return CONNERR_FORBIDDEN;
		}
		mConnections.put(new Integer(mConnNextHandle), mac);
		return mConnNextHandle++;
	} else if(url.startsWith("datagram://:") || url.equals("datagram://")) {
		MAUdpConn mac = new MAUdpConn(mConnNextHandle);
		try {
			mac.dConn = (UDPDatagramConnection)Connector.open(url);
		} catch(IOException e) {
			PRINT_STACK_TRACE;
			return CONNERR_GENERIC;
		} catch(SecurityException e) {
			PRINT_STACK_TRACE;
			return CONNERR_FORBIDDEN;
		}
		mConnections.put(new Integer(mConnNextHandle), mac);
		return mConnNextHandle++;
	} else if(url.startsWith("datagram://")) {
		MADatagramConn mac = new MADatagramConn(mConnNextHandle);
		mConnections.put(new Integer(mConnNextHandle), mac);
		mac.state |= CONNOP_CONNECT;
		mThreadPool.execute(new DatagramConnect(mac, url));
		return mConnNextHandle++;
	}
	MAStreamConn mac = new MAStreamConn(mConnNextHandle);
	mConnections.put(new Integer(mConnNextHandle), mac);
	mac.state |= CONNOP_CONNECT;
	mThreadPool.execute(new Connect(mac, url));
	return mConnNextHandle++;
}

NETSYSCALL(int) maAccept(MAHandle serv) {
	MAServerConn mac = (MAServerConn)mConnections.get(new Integer(serv));
	MYASSERT((mac.state & CONNOP_ACCEPT) == 0);
	MYASSERT(mac.notifier != null);
	mac.state |= CONNOP_ACCEPT;
	mThreadPool.execute(new Accept(mac));
	return 1;
}

NETSYSCALL(int) maConnGetAddr(MAHandle conn, Address addr) throws Exception {
	DEBUG_CONN("GCA " + conn + " " + addr + "\n");
	INIT_MEMDS;
	if(conn == HANDLE_LOCAL) {
		int family = RINT(addr);
#ifdef MA_PROF_SUPPORT_JAVAPACKAGE_BLUETOOTH
		if(family == CONN_FAMILY_BT) {
			LocalDevice ld = LocalDevice.getLocalDevice();
			writeBtAddressToMemory(ld.getBluetoothAddress(), addr + 8);
			return 1;
		} else
#endif
		{
			return CONNERR_INTERNAL;	//TODO: implement for TCP/IP
		}
	}
	MAConn mac = (MAConn)mConnections.get(new Integer(conn));
	if(mac instanceof MAStreamConn) {
		MAStreamConn masc = (MAStreamConn)mac;
		if(masc.conn instanceof SocketConnection) {
			//todo: implement
			return CONNERR_INTERNAL;
		}
#ifdef MA_PROF_SUPPORT_JAVAPACKAGE_BLUETOOTH
		//check bluetooth
		try {
			RemoteDevice rd = RemoteDevice.getRemoteDevice(masc.conn);
			WINT(addr, CONN_FAMILY_BT);
			WINT(addr + 4, 0);	//port unavailable
			writeBtAddressToMemory(rd.getBluetoothAddress(), addr + 8);
			return 1;
		} catch(IllegalArgumentException e) {	//not bluetooth
			PRINT_STACK_TRACE;
		}
	} else if(mac instanceof MAServerConn) {
		MAServerConn masc = (MAServerConn)mac;
		MYASSERT(masc.notifier != null);
		//if bluetooth
		//we only have bluetooth servers for now.
		{
			LocalDevice ld = LocalDevice.getLocalDevice();
			ServiceRecord sr = ld.getRecord(masc.notifier);
			String curl = sr.getConnectionURL(0, false);
			DEBUG_CONN(curl + "\n");
			int port = Integer.parseInt(curl.substring(21, curl.indexOf(';', 21)));
			MYASSERT(port > 0 && port <= 30);
			DEBUG_CONN("port: " + port + "\n");

			WINT(addr, CONN_FAMILY_BT);
			WINT(addr + 4, port);
			writeBtAddressToMemory(ld.getBluetoothAddress(), addr + 8);
			return 1;
		}
#endif	//MA_PROF_SUPPORT_JAVAPACKAGE_BLUETOOTH
	} else if(mac instanceof MAUdpConn) {
		MAUdpConn mauc = (MAUdpConn)mac;
		MYASSERT(mauc.dConn != null);
		String a = mauc.dConn.getLocalAddress();
		WINT(addr, CONN_FAMILY_INET4);
		WINT(addr+4, parseIpv4(a, 0, a.length()));
		WINT(addr+8, mauc.dConn.getLocalPort());
		return 1;
	}
	return CONNERR_INTERNAL;
}

private final int parseIpv4(String a, int start, int end) {
	int p1 = a.indexOf('.', start);
	int h1 = Integer.parseInt(a.substring(start, p1));
	int p2 = a.indexOf('.', p1+1);
	int h2 = Integer.parseInt(a.substring(p1+1, p2));
	int p3 = a.indexOf('.', p2+1);
	int h3 = Integer.parseInt(a.substring(p2+1, p3));
	int h4 = Integer.parseInt(a.substring(p3+1, end));
	int host = (h1 << 24) | (h2 << 16) | (h3 << 8) | h4;
	return host;
}

NETSYSCALL(void) maConnClose(MAHandle conn) {
	DEBUG_CONN("ConnClose "+conn+"\n");
	Integer key = new Integer(conn);
	MAConn mac = (MAConn)mConnections.get(key);
	mac.close();
	mConnections.remove(key);
}

NETSYSCALL(void) maConnRead(MAHandle conn, Address dst, int size) {
	DEBUG_CONN("ConnRead "+conn+", "+size+"\n");
	MAConn mac = (MAConn)mConnections.get(new Integer(conn));
	MYASSERT((mac.state & CONNOP_READ) == 0);
	mac.state |= CONNOP_READ;
	mac.prepareRead();
	mThreadPool.execute(new ConnRead(mac, dst, size));
}

final MAConn setupWrite(MAHandle conn) throws IOException {
	MAConn m = (MAConn)mConnections.get(new Integer(conn));
	MYASSERT((m.state & CONNOP_WRITE) == 0);
	if(m instanceof MAStreamConn) {
		MAStreamConn mac = (MAStreamConn)m;
		if(mac.conn instanceof HttpConnection) {
			HttpConnection http = (HttpConnection)mac.conn;
			if(http.getRequestMethod().equals(HttpConnection.POST) && mac.httpState == HTTPS_SETUP) {
				MYASSERT(mac.out == null);
				mac.out = mac.conn.openOutputStream();
				mac.httpState = HTTPS_WRITING;
			}
		}
		MYASSERT(mac.out != null);
	}
	return m;
}

NETSYSCALL(void) maConnWrite(MAHandle conn, Address src, int size) throws IOException {
	MAConn mac = setupWrite(conn);

	mac.state |= CONNOP_WRITE;
	mThreadPool.execute(new ConnWrite(mac, src, size));
}

NETSYSCALL(void) maConnReadFrom(MAHandle conn, Address dst, int size, Address src) {
	DEBUG_CONN("ConnReadFrom "+conn+", "+size+"\n");
	MAUdpConn mac = (MAUdpConn)mConnections.get(new Integer(conn));
	MYASSERT((mac.state & CONNOP_READ) == 0);
	mac.state |= CONNOP_READ;
	mac.src = src;
	mac.prepareRead();
	mThreadPool.execute(new ConnRead(mac, dst, size));
}

NETSYSCALL(void) maConnWriteTo(MAHandle conn, Address src, int size, Address dst) throws IOException {
	DEBUG_CONN("ConnWriteTo "+conn+", "+size+"\n");
	INIT_MEMDS;
	MYASSERT(RINT(dst) == CONN_FAMILY_INET4);
	int a = RINT(dst + 4);
	int port = RINT(dst + 8);
	String host = ((a >> 24) & 0xff)+
		"."+((a >> 16) & 0xff)+
		"."+((a >> 8) & 0xff)+
		"."+((a) & 0xff);
	String dstString = "datagram://"+host+":"+port;
	MAUdpConn mac = (MAUdpConn)setupWrite(conn);
	mac.state |= CONNOP_WRITE;
	mac.dst = dstString;
	mThreadPool.execute(new ConnWrite(mac, src, size));
}

NETSYSCALL(void) maConnReadToData(MAHandle conn, MAHandle data, int offset, int size) {
	MYASSERT(offset >= 0);
	MYASSERT(size > 0);
	MYASSERT(offset + size > 0);

	Binary bin = (Binary)getResource(data);
	MYASSERT(bin.size() >= offset + size);

	MAConn mac = (MAConn)mConnections.get(new Integer(conn));
	MYASSERT((mac.state & CONNOP_READ) == 0);
	mac.prepareRead();

	setResource(data, mFlux);
	mac.state |= CONNOP_READ;
	mThreadPool.execute(new ConnReadToData(mac, bin, data, offset, size));
}

NETSYSCALL(void) maConnWriteFromData(MAHandle conn, MAHandle data, int offset, int size) throws IOException {
	MYASSERT(offset >= 0);
	MYASSERT(size > 0);
	MYASSERT(offset + size > 0);

	BinaryInterface bi = (BinaryInterface)getResource(data);
	MYASSERT(bi.size() >= offset + size);

	MAConn mac = setupWrite(conn);

	setResource(data, mFlux);
	mac.state |= CONNOP_WRITE;
	mThreadPool.execute(new ConnWriteFromData(mac, bi, data, offset, size));
}

NETSYSCALL(MAHandle) maHttpCreate(String url, int method) throws Exception {
	DEBUG_CONN("HttpCreate "+mConnNextHandle+" "+url+"\n");
	if(mConnections.size() >= CONN_MAX)
		return CONNERR_MAX;
	int rw;
	String methString;
	switch(method) {
	case HTTP_GET:
#ifdef MA_PROF_BLACKBERRY_VERSION
		rw = Connector.READ_WRITE;
#else
		rw = Connector.READ;
#endif
		methString = HttpConnection.GET;
		break;
	case HTTP_POST:
		rw = Connector.READ_WRITE;
		methString = HttpConnection.POST;
		break;
	case HTTP_PUT:
		rw = Connector.READ_WRITE;
		methString = "PUT";//HttpConnection.PUT;
		break;
	case HTTP_DELETE:
		rw = Connector.READ_WRITE;
		methString = "DELETE";//HttpConnection.DELETE;
		break;
	case HTTP_HEAD:
		rw = 0;	//uncertain if this works
		methString = HttpConnection.HEAD;
		break;
	default:
		BIG_PHAT_ERROR;
	}
	HttpConnection http;
	try {
#ifdef BB_RIM_NETWORKING
		http = (HttpConnection)BlackBerryConnectionFactory.openConnection(url);
#else
#if MA_PROF_BLACKBERRY_VERSION == 4
		url+=";interface=wifi";
#endif
		http = (HttpConnection)Connector.open(url, rw, true);
#endif
		http.setRequestMethod(methString);
	} catch(SecurityException e) {
		PRINT_STACK_TRACE;
		return CONNERR_FORBIDDEN;
	}
	MAStreamConn mac = new MAStreamConn(mConnNextHandle);
	mac.conn = http;
	DEBUG_ASSERT(mac.httpState == HTTPS_NULL);
	mac.httpState = HTTPS_SETUP;
	mConnections.put(new Integer(mConnNextHandle), mac);
	return mConnNextHandle++;
}

NETSYSCALL(void) maHttpSetRequestHeader(MAHandle conn, String key, String value)
throws Exception
{
	DEBUG_CONN("HttpSetRequestHeader "+conn+" "+key+" "+value+"\n");
	MAStreamConn mac = (MAStreamConn)mConnections.get(new Integer(conn));
	HttpConnection http = (HttpConnection)mac.conn;
	MYASSERT(mac.httpState == HTTPS_SETUP);
	http.setRequestProperty(key, value);
}

NETSYSCALL(int) maHttpGetResponseHeader(MAHandle conn, String key, Address buffer, int bufSize)
throws Exception
{
	DEBUG_CONN("HttpGetResponseHeader "+conn+" "+key+"\n");
	MAStreamConn mac = (MAStreamConn)mConnections.get(new Integer(conn));
	HttpConnection http = (HttpConnection)mac.conn;
	MYASSERT(mac.httpState == HTTPS_FINISHED);
	final String value = http.getHeaderField(key);
	DEBUG_CONN(" "+value+"\n");
	if(value == null)
		return CONNERR_NOHEADER;
	return writeStringBuf(value, buffer, bufSize);
}

NETSYSCALL(void) maHttpFinish(MAHandle conn) {
	MAStreamConn mac = (MAStreamConn)mConnections.get(new Integer(conn));
	MYASSERT(mac.state == 0);
	MYASSERT(mac.httpState == HTTPS_SETUP || mac.httpState == HTTPS_WRITING);
	mac.state = CONNOP_FINISH;
	mac.httpState = HTTPS_FINISHING;
	mThreadPool.execute(new HttpFinish(mac));
}

NETSYSCALL(void) initNetworking() {
}

NETSYSCALL(void) destructNetworking() throws Exception {
	Enumeration e = mConnections.elements();
	while(e.hasMoreElements()) {
		MAConn mac = (MAConn)e.nextElement();
		mac.close();
	}
}
