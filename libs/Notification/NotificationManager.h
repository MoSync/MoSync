/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

/*! \addtogroup NotificationLib
 *  @{
 */

/**
 *  @defgroup NotificationLib Notification Library
 *  @{
 */

/**
 * @file NotificationManager.h
 * @author Emma Tresanszki and Bogdan Iusco
 * @date 1 Nov 2011
 *
 * @brief  The NotificationManager manages local and push notification events
 * and dispatches them to the target notifications.
 * @platform Android, iOS.
 */

#ifndef NOTIFICATION_NOTIFICATION_MANAGER_H_
#define NOTIFICATION_NOTIFICATION_MANAGER_H_

#include <MAUtil/String.h>
#include <MAUtil/Map.h>
#include <MAUtil/Environment.h>

#include "LocalNotification.h"

/**
* \brief MoSync Notification API classes.
*/
namespace Notification
{

    /**
     * @brief Constants indicating the types of push notifications
     * the application accepts.
     * Specific to iOS.
     * On Android PUSH_NOTIFICATION_TYPE_ALERT is set by default.
     */
    enum PushNotificationType
    {
        /**
         * @brief The application accepts notifications that badge the
         * application icon.
         */
        PUSH_NOTIFICATION_TYPE_BADGE = 0x01,
        /**
         * @brief The application accepts alert sounds as notifications.
         */
        PUSH_NOTIFICATION_TYPE_SOUND = 0x02,
        /**
         * @brief The application accepts alert messages as notifications.
         */
        PUSH_NOTIFICATION_TYPE_ALERT = 0x04
    };

    /**
     * Constants indicating the possible Push notification registration failure
     * reasons.
     * Platform: Android only.
     */
    /**
     * @brief Indicates that the device can't read the response, or there was
     * a 500/503 from the server that can be retried later.
     * The application should use exponential back off and retry.
     * Platform: Android only.
     */
    const MAUtil::String NOTIFICATIONS_REGISTRATION_ERR_SERVICE_NOT_AVAILABLE =
        "SERVICE_NOT_AVAILABLE";

    /**
     * @brief Indicates that there is no Google account on the phone.
     * The application should ask the user to open the account manager and add
     * a Google account.
     * Platform: Android only.
     */
    const MAUtil::String NOTIFICATIONS_REGISTRATION_ERR_ACCOUNT_MISSING =
        "ACCOUNT_MISSING";

    /**
     * @brief Indicates that the Google password was bad.
     * The application should ask the user to enter his/her password, and let
     * user retry manually later.
     * Platform: Android only.
     */
    const MAUtil::String NOTIFICATIONS_REGISTRATION_ERR_AUTHENTICATION_FAILED =
        "AUTHENTICATION_FAILED";

    /**
     * @brief Indicates that the user has too many applications registered.
     * The application should tell the user to uninstall some other applications,
     * let user retry manually.
     * Platform: Android only.
     */
    const MAUtil::String NOTIFICATIONS_REGISTRATION_ERR_TOO_MANY_REGISTRATIONS =
        "TOO_MANY_REGISTRATIONS";

    /**
     * @brief Indicates that the sender account is not recognized.
     * Platform: Android only.
     */
    const MAUtil::String NOTIFICATIONS_REGISTRATION_ERR_INVALID_SENDER =
        "INVALID_SENDER";


    // Forward declaration.
    class LocalNotification;
    class LocalNotificationListener;
    class PushNotificationListener;

    /**
     * \brief Class that handles notification events.
     * It contains methods for setting & getting application's characteristics
     * (e.g. application icon badge number on iOS).
     */
    class NotificationManager : public MAUtil::CustomEventListener
    {
    public:
        /**
         * Destructor.
         */
        virtual ~NotificationManager();

        /**
         * Return the single instance of this class.
         */
        static NotificationManager* getInstance();

        /**
         * Destroy the single instance of this class.
         * Call this method only when the application will exit.
         */
        static void destroyInstance();

        /**
         * Implementation of CustomEventListener interface.
         * This method will get called whenever there is a
         * event generated by the system.
         * @param event The new received event.
         */
        virtual void customEvent(const MAEvent& event);

        /**
         * Add an event listener for local notifications.
         * @param listener The listener that will receive
         * local notification events.
         */
        void addLocalNotificationListener(
            LocalNotificationListener* listener);

        /**
         * Remove the event listener for local notifications.
         * @param listener The listener that receives local notification events.
         */
        void removeLocalNotificationListener(
            LocalNotificationListener* listener);

        /**
         * Schedules a local notification for delivery at its encapsulated
         * date and time.
         * By default, the notifications are displayed to the user only if the application
         * is in background. But on Android you can configure this via the
         * #MA_NOTIFICATION_LOCAL_DISPLAY_FLAG property by calling setDisplayFlag().
         * @param localNotification Handle to a local notification object.
         * @return One of the constants:
         *  - #MA_NOTIFICATION_RES_OK if no error occurred.
         *  - #MA_NOTIFICATION_RES_INVALID_HANDLE if the notificationHandle is invalid.
         *  - #MA_NOTIFICATION_RES_ALREADY_SCHEDULED if the notification was already
         *  scheduled.
         */
        int scheduleLocalNotification(
            LocalNotification* localNotification);

        /**
         * Cancels the delivery of the specified scheduled local notification.
         * calling this method also programmatically dismisses the notification
         * if  it is currently displaying an alert.
         * @param localNotification Handle to a local notification object.
         * @return One of the constants:
         *  - #MA_NOTIFICATION_RES_OK
         *  - #MA_NOTIFICATION_RES_INVALID_HANDLE if the notificationHandle is invalid.
         *  - #MA_NOTIFICATION_RES_CANNOT_UNSCHEDULE If the notification was not
         *  scheduled.
         */
        int unscheduleLocalNotification(
            LocalNotification* localNotification);

        /**
         * Registers the current application for receiving push notifications.
         * Registration is made on the Apple Push Service, or Google GCM/C2DM Service,
         * depending on the underlying platform.
         * @param types A bit mask specifying the types of notifications the
         * application accepts.
         * See PushNotificationType for valid bit-mask values.
         * This param is applied only on iOS platform. Android platform will
         * ignore this value.
         * @param senderId Your projectId obtained from here:
         * http://developer.android.com/guide/google/gcm/gs.html#create-proj
         * For old applications, this param was set as the ID of the account
         * authorized to send messages to the application, typically the email
         * address of an account set up by the application's developer.
         * Even though setting the senderId as the accountID was deprecated, old
         * Android applications still support it.
         * On iOS platform this param is ignored.
         *
         * Example: Notification::getInstance->registerPushNotification(
         *  PUSH_NOTIFICATION_TYPE_BADGE | PUSH_NOTIFICATION_TYPE_ALERT, "yoursenderId_here");
         *
         *  @return One of the next result codes:
         *  - #MA_NOTIFICATION_RES_OK if no error occurred.
         *  - #MA_NOTIFICATION_RES_ALREADY_REGISTERED if the application is already
         *    registered for receiving push notifications.
         *  - #MA_NOTIFICATION_RES_UNSUPPORTED if notifications are not supported
         *  on current platform.
         */
        int registerPushNotification(
            const int types,
            const MAUtil::String& senderId);

        /**
         * Unregister application for push notifications.
         */
        void unregisterPushNotification();

        /**
         * Add listener for push notifications received by this application.
         * @param listener The listener that will receive
         * push notification events.
         * Don't forget to register the application for receiving push
         * notifications by calling registerPushNotification function.
         */
        void addPushNotificationListener(
            PushNotificationListener* listener);

        /**
         * Remove listener for push notifications received by this application.
         * @param listener The listener that receives push notification events.
         */
        void removePushNotificationListener(
            PushNotificationListener* listener);

        /**
         * Set the number currently set as the badge of the application icon.
         * Platform: iOS only.
         * @param iconBadgeNumber The number that will be set as the badge of
         * the application icon.
         * If this value is negative this method will do nothing.
         */
        void setApplicationIconBadgeNumber(const int iconBadgeNumber);

        /**
         * Get the number currently set as the badge of the application icon.
         * Platform: iOS only.
         * @return The number currently set as the badge of the application icon.
         */
        int getApplicationIconBadgeNumber();

        /**
         * Set the display flags applied to the incoming push notifications.
         * Note that regardless of this setting, the didReceivePushNotification
         * callback will be made for each incoming notification.
         * #NOTIFICATION_DISPLAY_DEFAULT is enabled by default.
         * Platform: Android only.
         * @param displayFlag  is the required state of the application for
         * a notification to be displayed. One of the constants:
         *  - #NOTIFICATION_DISPLAY_DEFAULT
         *  - #NOTIFICATION_DISPLAY_ANYTIME.
         * @return Any of the following result codes:
         * - #MA_NOTIFICATION_RES_OK if the property could be set.
         * - #MA_NOTIFICATION_RES_INVALID_PROPERTY_NAME if the property name
         * was invalid for the target platform.
         */
        int setPushNotificationsDisplayFlag(const NotificationDisplayFlag displayFlag);

        /**
         * Set the  message title in the notification area for incoming push
         * notifications.
         * This call does not alter already received notifications.
         * Platform: Android only.
         * @param title The title that goes in the expanded entry of the
         * notification.
         * @return Any of the following result codes:
         * - #MA_NOTIFICATION_RES_OK if the property could be set.
         * - #MA_NOTIFICATION_RES_INVALID_PROPERTY_NAME if the property name
         * was invalid for the target platform.
         */
        int setPushNotificationsTitle(const MAUtil::String& title);

        /**
         * Set the ticker text in the notification status bar for incoming push
         * notifications.
         * This call does not alter already received notifications.
         * Platform: Android only.
         * @param ticker The text that flows by in the status bar when the
         * notification first activates.
         * @return Any of the following result codes:
         * - #MA_NOTIFICATION_RES_OK if the property could be set.
         * - #MA_NOTIFICATION_RES_INVALID_PROPERTY_NAME if the property name
         * was invalid for the target platform.
         */
        int setPushNotificationsTickerText(const MAUtil::String& ticker);

        /**
         * Get the message title of the incoming notifications.
         * This text can be set with NotificationManager::setPushNotificationsTitle
         * to apply to all incoming notifications.
         * Platform: Android only.
         * @return the title that goes in the expanded entry of the notification.
         */
        MAUtil::String getMessageTitle() const;

        /**
         * Get the ticker text in the notification status bar for the incoming
         * notifications.
         * This text can be set with
         * NotificationManager::setPushNotificationsTickerText
         * to apply to all incoming notifications.
         * Platform: Android only.
         * @return The text that flows by in the status bar when the notification
         * first activates.
         */
        MAUtil::String getTickerText() const;

    protected:
        /**
         * Constructor is protected since this is a singleton.
         * (subclasses can still create instances).
         */
        NotificationManager();

        /**
         * Notifies listeners that a new local notification event has been
         * received.
         * @param event The new received event.
         */
        void receivedLocalNotification(const MAEvent& event);

        /**
         * Notifies listeners that a new push notification event has been
         * received.
         * @param event The new received event.
         */
        void receivedPushNotification(const MAEvent& event);

    private:
        /**
         * The single instance of this class.
         */
        static NotificationManager* sInstance;

        /**
         * The title of the message for the incoming notifications.
         * Platform: Android only.
         */
        MAUtil::String* mTitle;

        /**
         * The ticker text for the incoming notifications.
         * The text that flows by in the status bar when the notification first
         * activates.
         * Platform: Android only.
         */
        MAUtil::String* mTickerText;

        /**
         * Dictionary of scheduled local notifications identified by handles.
         */
        MAUtil::Map<MAHandle, LocalNotification*> mLocalNotificationMap;

        /**
         * Array with local notification listeners.
         */
        MAUtil::Vector<LocalNotificationListener*> mLocalNotificationListeners;

        /**
         * Array with push notification listeners.
         */
        MAUtil::Vector<PushNotificationListener*> mPushNotificationListeners;
    };

} // namespace Notification

#endif /* NOTIFICATION_NOTIFICATION_MANAGER_H_ */

/*! @} */
