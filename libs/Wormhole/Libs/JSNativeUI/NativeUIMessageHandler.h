/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

/**
 * @file NativeUIMessageHandler.h
 * @author Ali Sarrafi
 *
 * Implementation of NativeUI calls made from JavaScript.
 */

#ifndef WORMHOLE_LIBS_JSNATIVEUI_NATIVEUIMESSAGEHANDLER_H_
#define WORMHOLE_LIBS_JSNATIVEUI_NATIVEUIMESSAGEHANDLER_H_

//#include <Wormhole/WebViewMessage.h>
#include <NativeUI/WebView.h>
#include <MAUtil/String.h>
#include "../../MessageStream.h"

namespace Wormhole
{
	/**
	 * Class that implements JavaScript calls.
	 *
	 * The JavaScript side is in file extendedbridge.js.
	 */
	class NativeUIMessageHandler:
		public MAUtil::CustomEventListener
	{
	public:
		/**
		 * Constructor.
		 */
		NativeUIMessageHandler(NativeUI::WebView* webView);

		/**
		 * Destructor.
		 */
		virtual ~NativeUIMessageHandler();

		/**
		 * Turn on processing of Native UI events.
		 */
		virtual void nativeUIEventsOn();

		/**
		 * Turn off processing of Native UI events.
		 */
		virtual void nativeUIEventsOff();

		/**
		 * Implementation of standard API exposed to JavaScript.
		 * @return true if message was handled, false if not.
		 */
		virtual bool handleMessage(Wormhole::MessageStream& message);

		/**
		 * Handles custom events generated by NativeUI Widgets.
		 */
		virtual void customEvent(const MAEvent&);

	protected:

		/**
		 * General wrapper for NativeUI success callback.
		 * If an operation is successful this function should be called.
		 *
		 * @param data the data that should be passed to the callback function
		 */
		virtual void sendNativeUISuccess(const char* data);

		/**
		 * General wrapper for NativeUI error callback.
		 * If an operation is successful this function should be called.
		 *
		 * @param data the data that should be passed to the callback function
		 */
		virtual void sendNativeUIError(const char* data);

		/**
		 * A Pointer to the main webview
		 * Used for communicating with NativeUI
		 */
		NativeUI::WebView* mWebView;

		/**
		 * If true, NativeUI events are sent to the WebView.
		 * If false, NativeUI events are not sent.
		 */
		bool mNativeUIEventsOn;
	};
} // namespace

#endif
