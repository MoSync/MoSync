/* Copyright (C) 2013 Mobile Sorcery AB

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2, as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
*/

/**
 * @file CameraEventManager.h
 * @author Mircea Vasiliniuc
 *
 * \brief The CameraEventManager manages camera events and dispatches
 * them to the attached listeners.
 */

#ifndef MAUTIL_CAMERAMANAGER_H_
#define MAUTIL_CAMERAMANAGER_H_

#include <MAUtil/Environment.h>
#include <MAUtil/util.h>

namespace MAUtil {

    /**
     *  A listener for camera events.
     */
    class ICameraListener
    {
    public:
        /**
         * Called when a camera event was triggered.
         *
         * \param event a camera related event.
         */
        virtual void handleCameraEvent(const MAEvent& event) = 0;
    };

    /**
     * \brief Class responsible for dispatching camera events.
     */
    class CameraEventManager : public MAUtil::CustomEventListener
    {
    public:
        /**
         * Destructor.
         */
        virtual ~CameraEventManager();

        /**
         * Getter for the single instance of this class.
         * \return the single instance of this class
         */
        static CameraEventManager* getInstance();

        /**
         * Destroys the single instance of this class.
         * Call this method only when the application will exit.
         */
        static void destroyInstance();

        /**
         * Implementation of CustomEventListener interface.
         * This method will get called whenever there is a
         * event generated by the system.
         *
         * \param event The new received event.
         */
        virtual void customEvent(const MAEvent& event);

        /**
         * Function to register a ICameraListener, to which all camera events
         * are distributed.
         *
         * \param cameraListener Pointer to the ICameraListener instance.
         */
        void addCameraListener(ICameraListener* cameraListener);

        /**
         * Remove a ICameraListener.
         *
         * \param cameraListener Pointer to the ICameraListener instance.
         */
        void removeCameraListener(ICameraListener* cameraListener);

    protected:
        /**
         * Constructor is protected since this is a singleton.
         * (subclasses can still create instances).
         */
        CameraEventManager();

    private:
        /**
         * The single instance of this class.
         */
        static CameraEventManager* sInstance;

        /**
         * Array of camera events listeners.
         */
        Vector<ICameraListener*> mListeners;
    };
} // MAUtil

#endif // MAUTIL_CAMERAMANAGER_H_
