/*
Copyright (C) 2011 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

/**
*MoSync provides Native UI support on Android, iOS and Windows Phone. This means that you can develop
*user interfaces that use each target platform's own widgets.
*We have mapped the different ways of coding UIs to a single API. A few properties/widgets
*are only be available on one platform, but most are available on all three platforms (e.g. Android, iOs and Windows Phone).
*
*All native UI API functions begin with the prefix "maWidget". It is a minimal
*API where widgets with different semantics in the UI can be created: widget
*properties affect widget appearance and behaviour. Some of the widgets can have children.
*
*There are three main types of widget: Screens, Layouts and Views. We
*explain them briefly here. The illustration below shows a typical widget hierarchy:
*
\verbatim
           Screen
              |
        VerticalLayout
        /            \
    EditBox        ListView
                   /      \
            ListViewItem  ListViewItem....
\endverbatim
*
*
*\b See Also
*
*     #NativeUI library.
*
*\b Screens
*
*Screens represent the root of a UI hierarchy. If you're used to iPhone
*programming, a Screen is equivalent to a UIViewController. If you're used to Android
*programming, a Screen is equivalent to an Activity.
*
*For now there are three types of Screens: Screen, TabScreen, StackScreen.
*- 	\b Screen \n
*   A container for layouts or views. A Screen can have Layouts or Views as children.
*
*- 	\b TabScreen \n
*   A special kind of screen that displays a tab bar and can have several Screens as children, each one representing a specific tab.
*
*- 	\b StackScreen \n
*   A special kind of screen that manages navigation and animation between Screens. It manages a stack of screens. Any Screen can be pushed to
*	the StackScreen in order to animate to it. Internally the StackScreen will push the
*	screen onto a stack. When a StackScreen is popped, the stack of screens is popped
*	and the Screen remaining on the stack is animated to and displayed.
*
*To show a screen you use #maWidgetScreenShow. A screen that is shown using this function should NOT have
*have a parent screen (i.e., it should be at the root of a widget hierarchy).
*
*
*\b Layouts
*
*There are different layouts to facilitate dynamic layouts. If you want the same layout
*for different screen sizes these come in handy.
*
*For now there are three different layouts: RelativeLayout, VerticalLayout and
*HorizontalLayout.
*
*- 	\b RelativeLayout \n
*   A layout that just places its children relative to itself, using the coordinates set on the children ("left" and "top" properties).
*
*- 	\b VerticalLayout \n
*   A layout that stacks views in the vertical axis.
*
*- 	\b HorizontalLayout \n
*   A layout that stacks views in the horizontal axis.
*
*All widgets have a set of default properties called "width" and "height". These properties
*specify the actual width and height of the widget. However these values can also be set
*to two different constants:
*
*- 	#MAW_CONSTANT_WRAP_CONTENT means that the width or height should automatically
*be set to wrap the content. If you set width and height to #MAW_CONSTANT_WRAP_CONTENT on
*a label, the width and height of the widget will automatically be set to the size of the label text.
*
*- 	#MAW_CONSTANT_FILL_AVAILABLE_SPACE dynamically adapts the size of the widget to
*the parent. If a widget is put inside a RelativeLayout or Screen
*the widget will be stretched to fill the parent.
*
*With vertical and horizontal layouts these constants are more powerful: they mean that the
*width or height should be divided among all
*widgets that have #MAW_CONSTANT_FILL_AVAILABLE_SPACE set. For example, say you have a
*HorizontalLayout that is 320 wide and you add 2 widgets that are 30 pixels wide and then two widgets that
*have #MAW_CONSTANT_FILL_AVAILABLE_SPACE set as the width. These will share the remaining space which
*equals 320-30*2=260. This means that they both will be 130 pixels wide.
*
*
*\b Views
*
*There are many different kinds of Views. They are all leaf-nodes in the UI tree.
*
*Today these views are available:
*
*- \b ActivityIndicator \n
*	Used for displaying the indeterminate progress of a task over time.
*
*- \b Button \n
*  Just a simple click-able button that can have a title.
*
*- \b CameraPreview \n
*	A view that allows users to visualize the camera controller.
*
*- \b CheckBox \n
*  A switch/toggle button.
*
*- \b DatePicker \n
*	A widget that allows the user to select dates.
*
*- \b EditBox \n
*  A text field that can be edited using the virtual keyboard.
*
*- \b GLView \n
*	A widget to draw accelerated graphics using OpenGL for Embedded Systems version 1.0 or 2.0.
*
*- \b Image \n
*	A view that displays an image. The images are loaded from resources and they can be scaled.
*
*- \b ImageButton \n
*	Same as button but can also have an background image instead of the default button style.
*
*- \b Label \n
*	A text label.
*
*- \b ListView \n
*  A scrollable list of ListViewItems.
*
*- \b ListViewItem \n
*	A widget that can be put in a ListView. It has a default layout for placing a text and a icon. But any view can be added to it in order to create a custom appearance.
*
*- \b Map \n
*	A widget that contains a google map (for Android and iOS) or a bing map (for Windows Phone).
*
*- \b NavBar \n
*	A toolbar-like view that can have a back button and a title. A NavBar will automatically appear if you're using a StackScreen. It is only available on iOS for now.
*
*- \b NumberPicker \n
*	A widget that enables the user to select a number from a predefined range. It is only available on iOS for now.
*
*- \b ProgressBar \n
*	Used to display the progress of a task over time.
*
*- \b RadioButton \n
*	Used for single item selection. It is only available on Android for now.
*
*- \b RadioGroup \n
*	Used for grouping RadioButtons. It is only available on Android for now.
*
*- \b RatingBar \n
*	Used to display a rating in stars. It is only available on Android for now.
*
*- \b SearchBar \n
*	Like an editbox on a toolbar with a default look and feel and a button for performing the search.
*
*- \b Slider \n
*	A widget with allows users to set a value by moving an indicator, usually in a horizontal fashion.
*
*- \b TimePicker \n
*	A view for selecting the time of day, in 24 hour mode.
*
*- \b ToggleButton \n
*	Displays checked/unchecked states as a button with a "light" indicator and by default accompanied with the text "ON" or "OFF". It is available on Android and windows Phone, and it is similar to the CheckBox on iOS.
*
*- \b VideoView \n
*	Manages the playback of a movie from a file or a network stream.</li>
*
*- \b WebView \n
*	A powerful widget that renders web content using the same WebKit rendering engines that powers the Safari and Android web browsers. It also runs on Windos Phone.
*
*
*\b Properties
*
*Widget have properties. These can change the appearance or behaviour of the widget. For some
*widgets you can also get properties: for an EditBox, for example, you can get the current text of the
*edit box. See the respective property set in the reference documentation for more information about
*what properties each widget has.
*
*
*\b Events
*
*A UI system is rather useless if you don't connect it with some kind of logic. Whenever something in
*the UI happens, events are sent from the runtime to the MoSync applications. These can be hooked to
*do whatever needs to be done. The top level event is called #EVENT_TYPE_WIDGET. When such an event is
*received, the data pointer of the #MAEvent struct points to a #MAWidgetEventData struct. See
*#MAWidgetEventData for more information about the widget events.
*
*As there aren't any listeners implemented in the Moblet architecture yet, you have to manually extract
*this data. An example of listening for a button event in the customEvent function of a Moblet:
*
*
\code
void customEvent(const MAEvent& event) {
    if(event.type == EVENT_TYPE_WIDGET) {
        MAWidgetEventData* widgetEventData = (MAWidgetEventData*)event.data;
        if(event.widgetHandle == myButtonHandle &&
           widgetEventData->eventType == MAW_EVENT_CLICKED) {
            // do something when the button is pressed.
        }
    }
}
\endcode
*
*
*/
