/**
* The available widget properties for a #MAW_LABEL. See of \ref WidgetProperties "Widget properties" for more properties.
*/
group WidgetLabelProperties "Label" {
	constset MAString MAW_LABEL_ {
		/**
		* @brief Sets or gets the text that is displayed in the label.
		*
		* @validvalue A null-terminated string.
		*
		* @setandget
		*
		* @par Example set
		* \code
		*	maWidgetSetProperty(labelHandle, MAW_LABEL_TEXT, "My label");
		* \endcode
		*
		* @par Example get
		* \code
		*	char textBuffer[BUFFER_SIZE];
		*	int result = maWidgetGetProperty(labelHandle, MAW_LABEL_TEXT, textBuffer, BUFFER_SIZE);
		*	if (result > 0)
		*	{
		*		// Do something with the label text.
		*	}
		* \endcode
		*/
		TEXT = "text";

		/**
		* @brief Sets the vertical alignment of the text inside the label. If the widget's height is WRAP_CONTENT this property has no effect.
		*
		* @validvalue One of the constants #MAW_ALIGNMENT_TOP, #MAW_ALIGNMENT_CENTER or #MAW_ALIGNMENT_BOTTOM.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(labelHandle, MAW_LABEL_TEXT_VERTICAL_ALIGNMENT, MAW_ALIGNMENT_CENTER);
		* \endcode
		*/
		TEXT_VERTICAL_ALIGNMENT = "textVerticalAlignment";

		/**
		* @brief Sets the horizontal alignment of the text inside the label. If the widget's height is WRAP_CONTENT this property has no effect.
		*
		* @validvalue Takes one of the constants #MAW_ALIGNMENT_TOP, #MAW_ALIGNMENT_CENTER or #MAW_ALIGNMENT_BOTTOM.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(labelHandle, MAW_LABEL_TEXT_HORIZONTAL_ALIGNMENT, MAW_ALIGNMENT_CENTER);
		* \endcode
		*/
		TEXT_HORIZONTAL_ALIGNMENT = "textHorizontalAlignment";

		/**
		* @brief Sets the font color of the label's text.
		*
		* @validvalue A hexadecimal value 0xRRGGBB, where R, G and B are the red, green and blue components respectively.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(labelHandle, MAW_LABEL_FONT_COLOR, "0xff0000");
		* \endcode
		*/
		FONT_COLOR = "fontColor";

		/**
		* @brief Sets the font size in points of the label's text.
		*
		* @validvalue A float that specifies the number of pixels on Android
		* and WP7, and number of points on iOS.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(labelHandle, MAW_LABEL_FONT_SIZE, "13.0");
		* \endcode
		*/
		FONT_SIZE = "fontSize";

		/**
		* @brief Sets the typeface and style in which the text should be displayed.
		*
		* @validvalue A font handle received from loading fonts using
		* #maFontGetName and #maFontLoadWithName syscalls.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	int nrFonts = maFontGetCount();
		*	 char buf[256];
		*	 // Get first font name.
		*	 maFontGetName(1, buf, 256);
		*	 // Load that font for size 10.
		*	 int fontHandle = maFontLoadWithName(buf, 10);
		*	 // Set that font to the label.
		*	maWidgetSetProperty(labelHandle, MAW_LABEL_FONT_HANDLE, toString(fontHandle));
		* \endcode
		*/
		FONT_HANDLE = "fontHandle";

		/**
		* @brief Sets the maximum number of lines used for rendering text.
		* To remove any maximum limit, and use as many lines as needed, set the value of this property to 0.
		*
		* @validvalue An integer that specifies the maximum number of lines.
		*
		* @setandget.
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(labelHandle, MAW_LABEL_MAX_NUMBER_OF_LINES, "3");
		* \endcode
		*/
		MAX_NUMBER_OF_LINES = "maxNumberOfLines";
	}
} // end of WidgetLabelProperties
