group CameraAPI "Camera API" {

	constset int MA_CAMERA_SNAPSHOT_ {
		/**
		* @brief A constant that represents the maximum snapshot size.
		*/
		MAX_SIZE = -1;
	}

	constset int MA_CAMERA_CONST_ {
		/**
		* @brief A constant that represents the flash being on.
		*/
		BACK_CAMERA = 0;

		/**
		* @brief A constant that represents the flash being in the automatic mode.
		*/
		FRONT_CAMERA = 1;

	} //end MA_CAMERA_CONST

	group CameraResultCodes "Camera Result Codes" {
		constset int MA_CAMERA_RES_ {
			/**
			* @brief A constant that represents successful camera operation.
			*/
			OK = 1;

			/**
			* @brief A constant that represents a failed camera operation.
			*/
			FAILED = -2;

			/**
			* @brief A constant that represents a camera failing to start.
			*/
			NOT_STARTED = -3;

			/**
			* @brief A constant that represents a property not supported by the device.
			*/
			PROPERTY_NOTSUPPORTED = -4;

			/**
			* @brief A constant that represents an invalid value for that property.
			*/
			INVALID_PROPERTY_VALUE = -5;

			/**
			* @brief A constant that represents a property value not supported by the device.
			*/
			VALUE_NOTSUPPORTED = -6;

			/**
			* @brief Another type of camera preview events has aldready been enabled.
			*/
			EVENTS_ALREADY_ENABLED = -7;

			/**
			* @brief The size of the screen which you want to read from the preview is not
			* withing the visual area.
			*/
			INVALID_PREVIEW_SIZE = -8;

		}
	} //end CameraResultCodes


	group FlashModes "Flash Modes" {
		constset MAString MA_CAMERA_FLASH_ {
			/**
			* @brief A constant that represents the flash being on.
			*/
			ON = "on";

			/**
			* @brief A constant that represents the flash being in the automatic mode.
			*/
			AUTO = "auto";

			/**
			* @brief A constant that represents the flash being off.
			*/
			OFF = "off";

			/**
			* @brief A constant that represents the flash being in the torch mode.
			*/
			TORCH = "torch";

		} //end MA_CAMERA_FLASH_
	}// end of FlashMode

	group FocusModes "Focus Modes" {
		constset MAString MA_CAMERA_FOCUS_ {
			/**
			* @brief A constant that represents the focus mode being automatic.
			*/
			AUTO = "auto";

			/**
			* @brief A constant that turns the camera to focus to infinity.
			*/
			INFINITY = "infinity";

			/**
			* @brief A constant that turns the camera to macro mode.
			*/
			MACRO = "macro";

			/**
			* @brief A constant that sets the camera to fixed focus mode.
			*/
			FIXED = "fixed";

		} //end MA_CAMERA_FOCUS_
	} //end of FocusMode

	group ImageFormat "Image Formats" {
		constset MAString MA_CAMERA_IMAGE_ {
			/**
			* @brief A constant that represents JPEG image format.
			*/
			JPEG = "jpeg";

			/**
			* @brief A constant that represents RAW image format.
			*/
			RAW = "raw";

		} //end MA_CAMERA_IMAGE_

		constset int MA_IMAGE_REPRESENTATION_ {
			/**
			* @brief An integer constant that represents unknown image format.
			*/
			UNKNOWN = -1;

			/**
			* @brief An integer constant that represents RAW image format.
			*/
			RAW = 0;

			/**
			* @brief An integer constant that represents JPEG image format.
			*/
			JPEG = 1;

			/**
			* @brief An integer constant that represents PNG image format.
			*/
			PNG = 2;
		} //end MA_IMAGE_REPRESENTATION_
	} //end ImageFormats

	group CameraProperties "Camera Properties" {

		constset MAString MA_CAMERA_ {

			/**
			* @brief Sets the flash mode for the camera.
			*
			* @validvalue can be one of the #MA_CAMERA_FLASH_ON, #MA_CAMERA_FLASH_OFF, #MA_CAMERA_FLASH_AUTO, #MA_CAMERA_FLASH_TORCH constants
			*
			* @par Example
			* \code
			*	maCameraSetProperty(MAW_CAMERA_FLASH_MODE, MA_CAMERA_FLASH_AUTO);
			* \endcode
			*/
			FLASH_MODE = "flash-mode";

			/**
			* @brief Sets the focus mode for the camera.
			*
			* @validvalue can be one of the #MA_CAMERA_FOCUS_AUTO, #MA_CAMERA_FOCUS_INFINITY, #MA_CAMERA_FOCUS_MACRO, #MA_CAMERA_FOCUS_FIXED constants
			*
			* @par Example
			* \code
			*	maCameraSetProperty(MAW_CAMERA_FOCUS_MODE, MA_CAMERA_FOCUS_AUTO);
			* \endcode
			*/
			FOCUS_MODE = "focus-mode";

			/**
			* @brief Sets the image format for the camera.
			*
			* @validvalue can be one of the #MA_CAMERA_IMAGE_JPEG, #MA_CAMERA_IMAGE_RAW constants
			*
			* @par Example
			* \code
			*	maCameraSetProperty(MAW_CAMERA_IMAGE_FORMAT, MA_CAMERA_IMAGE_JPEG);
			* \endcode
			*/
			IMAGE_FORMAT = "image-format";


			/**
			* @brief Sets the zoom level for the camera.
			*
			* @validvalue an int string that can be between 0 and #MA_CAMERA_MAX_ZOOM
			*
			* @par Example
			* \code
			*	maCameraSetProperty(MAW_CAMERA_ZOOM, "1");
			* \endcode
			*/
			ZOOM = "zoom";

			/**
			* @brief Provides the information about the maximum supported zoom level on the device.
			*
			* @getonly
			*
			*/
			MAX_ZOOM = "max-zoom";

			/**
			* @brief Indicates that if the device supports zoom or not.
			*
			* @validvalue the returned value is "true" for support and "false" for lack of support.
			*
			* @getonly
			*/
			ZOOM_SUPPORTED = "zoom-supported";

			/**
			* @brief Indicates that if the device has a flash or not.
			*
			* @validvalue the returned value is "true" for support and "false" for lack of support.
			*
			* @getonly
			*/
			FLASH_SUPPORTED = "flash-supported";

		} //end of MAC_
	} // end of CameraProperties

	group CameraPreviewEvents "Camera Preview Events" {
		constset int MA_CAMERA_PREVIEW_ {

			FRAME = 1;

			AUTO_FOCUS = 2;
		}
	}

	group CameraFunctions "Camera Functions" {
		/**
		* \brief The camera format, in pixels.
		*/
		struct MA_CAMERA_FORMAT {
			//in pixels.
			int width;
			int height;
		}

		/**
		* Returns the number of different output formats supported by the current device's camera.
		* \< 0 if there is no camera support.
		* 0 if there is camera support, but the format is unknown.
		*/
		int maCameraFormatNumber();

		/**
		* Stores an output format in \a fmt.
		* \a index must be \>= 0 and \< the number returned by maCameraFormatNumber().
		* \returns 0.
		*/
		int maCameraFormat(in int index, out MA_CAMERA_FORMAT fmt);

		/**
		* Starts a fullscreen viewfinder.
		* Returns 1 if the viewfinder was started, 0 if it was already running or \< 0 on error.
		*/
		// can be varied, but for now, we're keeping it simple.
		int maCameraStart();

		/**
		* Stops the viewfinder.
		* Returns 1 if the viewfinder was stopped, 0 if it was not running or \< 0 on error.
		*/
		int maCameraStop();

		/**
		* Adds a previewWidget to the camera controller in devices that support native UI.
		* Returns 1 for success, \< 0 on error.
		*/
		int maCameraSetPreview(in MAHandle widgetHandle);

		/**
		* Selects a Camera from the available ones.
		* Returns 1 for success, \< 0 on error.
		*/
		int maCameraSelect(in int cameraNumber);


		/**
		* Returns the number of available Camera on the device.
		* Returns 1 for success, \< 0 on error.
		*/
		int maCameraNumber();

		/**
		* Requires the viewfinder to be active.
		* Takes a snapshot using the specified format. The snapshot is
		* stored as a new data object in the supplied placeholder.
		* Returns 0 on success, or \< 0 on error.
		*
		* Note: Since MoSync 3.3 the usage of ths syscall is deprecated
		* and the use of #maCameraSnapshotAsync is recommended.
		*/
		int maCameraSnapshot(in int formatIndex, in MAHandle placeholder);

		/**
		* Requires the viewfinder to be active.
		* Triggers the reading of the camera buffer into dataPlaceholder according
		* to the specified sizeIndex.
		* The snapshot data will be passed via #EVENT_TYPE_CAMERA_SNAPSHOT event.
		*
		* \param dataPlaceholder a valid placeholder where the snapshot data
		* will be written.
		* \param sizeIndex snapshot size index. See #maCameraFormatNumber().
		* \return #MA_CAMERA_RES_OK on success, or #MA_CAMERA_RES_FAILED on error.
		*/
		int maCameraSnapshotAsync(in MAHandle dataPlaceholder, in int sizeIndex);

		/**
		* Starts or stops recording video.
		* \a stopStartFlag indicates the operation.
		* 1 for start recording and 0 for stop recording.
		* Returns 1 for success, \< 0 on error.
		*/
		int maCameraRecord(in int stopStartFlag);


		/**
		* Sets a specified property on the Selected Camera.
		*
		* \param property A string representing which property to set.
		* \param value The value which will be assigned to the property.
		*
		* \returns 1 for success and <0 for failure.
		*/
		int maCameraSetProperty(in MAString property, in MAString value);

		/**
		* retrives a specified property on the Selected Camera.
		*
		* \param property A string representing which property to set.
		* \param value A buffer that will hold the value of the property, represented as a string.
		* \param bufSize Size of the buffer.
		*
		* \returns 1 for success and <0 for failure.
		*/
		int maCameraGetProperty( in MAString property, out MAString value range("bufSize"), in int bufSize);

		/**
		* Retrieves the underlying camera preview size. This can be different
		* from the preview view so before enabling preview events it's
		* important that you check the true size.
		*
		* \returns the size as an EXTENT, <0 on failure.
		*/
		int maCameraPreviewSize();

		/**
		* Enables events for accessing data during camera preview.
		* Only one preview event may be used at the same time.
		*
		* \param previewEventType One of the CameraPreviewEvents
		* \param previewBuffer An int buffer in which the data will stored
		* \param previewArea The rectangle of the preview in which we will get data
		*
		* \return 1 on success and <0 on failure
		*/
		int maCameraPreviewEventEnable( in int previewEventType, out MAAddress previewBuffer, in MARect previewArea);

		/**
		* Turns off the current preview event
		*/
		int maCameraPreviewEventDisable();

		/**
		* Function that informs the runtime that it's ready to get
		* the next preview event.
		* This is because the preview sends a lot of events and if it
		* take some time to process the image the event cue should get
		* filled with events.
		*/
		int maCameraPreviewEventConsumed();
	} // end of CameraFunctions
} //end of CameraAPI
