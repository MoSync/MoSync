group PIMFunctions "PIM Functions"{
	/**
	* \brief Opens a PimList. Use maPimListNext() to open the list's items.
	* \param listType One of the \link #MA_PIM_CONTACTS MA_PIM \endlink constants.
	* \returns \>= 0 A PimList handle.
	*          \<  0 on error:
	*                    #MA_PIM_ERR_LIST_ALREADY_OPENED if the list is already opened.
	*                    #MA_PIM_ERR_LIST_UNAVAILABLE if the list is not available on the current platform.
	*                    #MA_PIM_ERR_LIST_TYPE_INVALID if the given list type is invalid.
	*/
	MAHandle maPimListOpen(in int listType);

	/**
	* \brief Returns a handle to the next PimItem in the \a list, or 0 if there are no more items,
	* or \< 0 on error.
	* You must use maPimItemClose() on every item to prevent memory leaks.
	* \param list List handle provided by maPimListOpen(int listType).
	* Calling this you can only get the name and the phone number when using maPimItemGetValue().
	* \returns \> 0 a PimItem handle.
	*          \= 0 if there are no more items.
	*          \< 0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the list handle is invalid.
	*/
	MAHandle maPimListNextSummary(in MAHandle list);

	/**
	* \brief Returns a handle to the next PimItem in the \a list, or 0 if there are no more items,
	* or \< 0 on error.
	* You must use maPimItemClose() on every item to prevent memory leaks.
	* \param list List handle provided by maPimListOpen(int listType).
	* \returns \> 0 a PimItem handle.
	*          \= 0 if there are no more items.
	*          \< 0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the list handle is invalid.
	*/
	MAHandle maPimListNext(in MAHandle list);

	/**
	* \brief Closes a PimList.
	* \param list List handle provided by maPimListOpen(int listType).
	* \returns #MA_PIM_ERR_NONE on success, or \< 0 on error.
	* #MA_PIM_ERR_LIST_NOT_OPENED if the list is not opened.
	* #MA_PIM_ERR_UNAVAILABLE_LIST if the list is unavailable.
	* #MA_PIM_ERR_INVALID_HANDLE if the list handle is invalid.
	* \note This does not close the list's items, but it does invalidate them,
	* so that maPimItemClose() is the only function you can safely use on them.
	*/
	int maPimListClose(in MAHandle list);

	/**
	* \brief Returns the number of fields in the \a item.
	* \param item Item handle provided by maPimListNext(MAHandle list).
	* \returns \>= 0 the number of fields in the item.
	*          \<  0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*/
	int maPimItemCount(in MAHandle item);

	/**
	* \brief Returns the field id of the item's n:th field.
	* Panics on invalid indices.
	* \param item Opened by maPimListNext().
	* \param n \>= 0 and \< maPimItemCount().
	* \returns \> 0 one of the \link #MA_PIM_FIELD_CONTACT_ADDR MA_PIM_FIELD \endlink constants.
	*          \< 0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_INDEX_INVALID if the param n is not valid.
	* \note On Android and iOS the panic system can be disabled so you'll get error codes instead.
	*/
	int maPimItemGetField(in MAHandle item, in int n);

	/**
	* \brief Returns the number of values in the field for a given item.
	* \param item Opened by maPimListNext().
	* \param field One of the \link #MA_PIM_FIELD_CONTACT_ADDR MA_PIM_FIELD \endlink constants.
	* \returns \> 0 the number of values in the field.
	*          \= 0 if the item field has no values.
	*          \< 0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field is unsupported.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*/
	int maPimItemFieldCount(in MAHandle item, in int field);

	/**
	* \brief Returns the attribute for the specified value in a field and item.
	* Panics on field/index combinations that don't exist in this item.
	* \param item Opened by maPimListNext().
	* \param field One of the \link #MA_PIM_FIELD_CONTACT_ADDR MA_PIM_FIELD \endlink constants.
	* \param index \>= 0 and \< maPimItemFieldCount().
	* \returns \> 0 the attribute for the specified field.
	*          \= 0 if the field doesn't have attributes.
	*          \< 0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*                    #MA_PIM_ERR_FIELD_EMPTY if the given field doesn't have values.
	*                    #MA_PIM_ERR_INDEX_INVALID if the index is invalid.
	* \note On Android and iOS the panic system can be disabled so you'll get error codes instead.
	*/
	int maPimItemGetAttributes(in MAHandle item, in int field, in int index);

	/**
	* \brief Sets a custom label for a value in a field and item.
	* Panics on field/index combinations that don't exist in this item.
	* The value's attribute must be set to custom.
	* The label has #MA_PIM_TYPE_STRING and is stored in \a args.buf.
	* \a args.bufSize must be valid.
	* \param args Common arguments.
	* \param index An index into the field's value array.
	* This is a number \>= 0 and \< the return value of maPimItemFieldCount().
	* \returns           #MA_PIM_ERR_NONE on success.
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*                    #MA_PIM_ERR_FIELD_EMPTY if the given field doesn't have values.
	*                    #MA_PIM_ERR_FIELD_READ_ONLY if the field is read-only.
	*                    #MA_PIM_ERR_INDEX_INVALID if the index is invalid.
	*                    #MA_PIM_ERR_NO_LABEL if the attribute is not set to custom.
	* \note This function is available only on Android or iOS.
	* \note On Android and iOS the panic system can be disabled so you'll get error codes instead.
	*/
	int maPimItemSetLabel(in MA_PIM_ARGS args, in int index);

	/**
	* Retrieves the custom label for a value in a field and item,
	* if the value has a custom label.
	* The label has #MA_PIM_TYPE_STRING and is stored in \a args.buf.
	* \a args.bufSize must be valid.
	* \param args Common arguments.
	* \param index An index into the field's value array.
	* This is a number \>= 0 and \< the return value of maPimItemFieldCount().
	* \returns \>= 0 the number of bytes occupied by the value.
	*          \<  0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*                    #MA_PIM_ERR_FIELD_EMPTY if the given field doesn't have values.
	*                    #MA_PIM_ERR_INDEX_INVALID if the index is invalid.
	*                    #MA_PIM_ERR_NO_LABEL if the attribute type is not set to custom.
	*                    #MA_PIM_ERR_BUFFER_TOO_SMALL if the size of the value is greaten than bufSize.
	* \note This function is available on Android or iOS.
	*/
	int maPimItemGetLabel(in MA_PIM_ARGS args, in int index);

	/**
	* Returns one of the type of the field.
	* \param list Opened by maPimListOpen().
	* \param field One of the \link #MA_PIM_FIELD_CONTACT_ADDR MA_PIM_FIELD \endlink constants.
	* \returns \>= 0 any of the \link #MA_PIM_TYPE_BINARY MA_PIM_TYPE \endlink constants.
	*          \<  0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the list handle is invalid.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*/
	int maPimFieldType(in MAHandle list, in int field);

	/**
	* \brief Arguments for PIM functions.
	*/
	struct MA_PIM_ARGS {
		/// Opened by maPimListNext().
		MAHandle item;
		/// One of the \link #MA_PIM_FIELD_CONTACT_ADDR MA_PIM_FIELD \endlink constants.
		int field;
		/// The address to a buffer, where a value is or will be stored.
		MAAddress buf;
		/// The size of the buffer, in bytes.
		int bufSize;
	}

	/**
	* Copies the specified value from a field and item to \a args.buf.
	* \param args Common arguments.
	* \param index An index into the field's value array.
	* This is a number \>= 0 and \< the return value of maPimItemFieldCount().
	* \returns \>= 0 The number of bytes occupied by the value.
	*          \<  0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*                    #MA_PIM_ERR_FIELD_EMPTY if the given field doesn't have values.
	*                    #MA_PIM_ERR_INDEX_INVALID if the index is invalid.
	*                    #MA_PIM_ERR_FIELD_WRITE_ONLY if the field is write-only.
	*/
	int maPimItemGetValue(in MA_PIM_ARGS args, in int index);

	/**
	* Changes a value and its attributes in a field and item.
	* This function cannot be used to add a new value.
	* \param args Common arguments.
	* \param index An index into the field's value array.
	* This is a number \>= 0 and \< the return value of maPimItemFieldCount().
	* \param attributes The value's new attributes.
	* \returns           #MA_PIM_ERR_NONE on success.
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*                    #MA_PIM_ERR_FIELD_READ_ONLY if the field is read-only.
	*                    #MA_PIM_ERR_FIELD_EMPTY if the given field doesn't have values.
	*                    #MA_PIM_ERR_INDEX_INVALID if the index is invalid.
	*                    #MA_PIM_ERR_ATTRIBUTE_COMBO_UNSUPPORTED if the field/attribute combination is not supported.
	*                    #MA_PIM_ERR_BUFFER_INVALID if the buffer is not valid.
	* \note The new value is not actually written to disk until
	* the item is closed with maPimItemClose(). If the program exits before then,
	* the changes are lost.
	* \note When setting a value with #MA_PIM_TYPE_STRING_ARRAY, at least one
	* string must be present and have a length greater than zero.
	* Any surplus strings are ignored.
	*/
	int maPimItemSetValue(in MA_PIM_ARGS args, in int index, in int attributes);

	/**
	* Adds a new value to a field and item.
	* \param args Common arguments.
	* \param attributes The new value's attributes.
	* \returns />= 0 the index of the new added value.
	*          /<  0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*                    #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*                    #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*                    #MA_PIM_ERR_FIELD_READ_ONLY if the field is read-only.
	*                    #MA_PIM_ERR_FIELD_COUNT_MAX if more values cannot be added to this field.
	*                    #MA_PIM_ERR_ATTRIBUTE_COMBO_UNSUPPORTED if the field/attribute combination is not supported.
	*                    #MA_PIM_ERR_BUFFER_INVALID if the buffer is not valid.
	* \note The new value is not actually written to disk until
	* the item is closed with maPimItemClose(). If the program exits before then,
	* the changes are lost.
	*/
	int maPimItemAddValue(in MA_PIM_ARGS args, in int attributes);

	/**
	* Removes a value from a field and item.
	* \param item Opened by maPimListNext().
	* \param field One of the \link #MA_PIM_FIELD_CONTACT_ADDR MA_PIM_FIELD \endlink constants.
	* \param index \>= 0 and \< maPimItemFieldCount().
	* \returns #MA_PIM_ERR_NONE on success.
	*          #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid.
	*          #MA_PIM_ERR_FIELD_INVALID if the field is invalid.
	*          #MA_PIM_ERR_FIELD_UNSUPPORTED if the field type is unsupported.
	*          #MA_PIM_ERR_FIELD_READ_ONLY if the field is read-only.
	*          #MA_PIM_ERR_FIELD_EMPTY if the given field doesn't have values.
	*          #MA_PIM_ERR_INDEX_INVALID if the index is invalid.
	* \note The changes is not actually written to disk until
	* the item is closed with maPimItemClose(). If the program exits before then,
	* the changes are lost.
	*/
	int maPimItemRemoveValue(in MAHandle item, in int field, in int index);

	/**
	* Closes the handle to a PimItem, releasing resources used by the system.
	* Writes any changes to disk.
	* \returns #MA_PIM_ERR_NONE on success.
	*          #MA_PIM_ERR_HANDLE_INVALID if the item handle is invalid, or if the item's list is closed.
	* \note An item can also be closed by maPimItemRemove().
	* \warning Does not write changes to disk if the item's List is closed.
	* Make sure to keep the List open while editing items.
	*/
	int maPimItemClose(in MAHandle item);

	/**
	* Creates a new empty item in the specified list.
	* \returns \>= 0 A handle to the new item.
	*          \<  0 on error:
	*                    #MA_PIM_ERR_HANDLE_INVALID if the list handle is invalid.
	* \note The handle must be closed with maPimItemClose() to avoid memory leaks.
	*/
	MAHandle maPimItemCreate(in MAHandle list);

	/**
	* Removes an item from a list. This also has the effect of closing the item.
	* \see maPimItemClose()
	* \returns #MA_PIM_ERR_NONE on success.
	*          #MA_PIM_ERR_HANDLE_INVALID if the list handle or item handle are invalid.
	* \note If this function fails, the item is not closed.
	*/
	int maPimItemRemove(in MAHandle list, in MAHandle item);
	} //end of pim functions
