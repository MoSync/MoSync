/**
* The available widget properties for a #MAW_SCREEN. See \ref WidgetProperties "Widget properties" for more properties.
*/
group WidgetScreenProperties "Screen" {
	constset MAString MAW_SCREEN_ {
		/**
		* @brief Sets the title of a screen. The screen title is used by tab screen to display a text on the tab indicator.
		*
		* @validvalue Null terminated string. The length of the string should be short enough to fit in a tab indicator.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(screenHandle, MAW_SCREEN_TITLE, "My title");
		* \endcode
		*/
		TITLE = "title";

		/**
		* @brief Overrides the default back button text, which is the previous screen's title.
		*
		* @validvalue MoSync handle to a navigation bar button widget.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(stackScreenHandle, MAW_SCREEN_SET_BACK_BUTTON, toString(navBarButtonWidgetHandle));
		* \endcode
		*/
		SET_BACK_BUTTON = "setBackButton";

		/**
		* @brief Sets an icon for a screen. The icon is used by a tab screen to display an icon on the tab indicator.
		*
		* @validvalue MoSync handle to an uncompressed image resource. The size of the image should be small enough to fit in a tab indicator.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(screenHandle, MAW_SCREEN_ICON, toString(R_MY_ICON));
		* \endcode
		*/
		ICON = "icon";

		/**
		* @brief Remove the options menu from this screen.
		* The options menu can be added by calling \ref maWidgetScreenAddOptionsMenuItem for each item.
		*
		* @validvalue No value needed.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(screenHandle, MAW_SCREEN_REMOVE_OPTIONS_MENU, "");
		* \endcode
		*/
		REMOVE_OPTIONS_MENU = "removeoptionsmenu";

		/**
		* @brief Check if a screen is shown.
		*
		* @validvalue "true" if the screen is visible, "false" otherwise.
		*
		* @getonly
		*
		* @par Example
		* \code
		*	char buffer[BUFFER_SIZE];
		*	int result = maWidgetGetProperty(screenHandle, MAW_SCREEN_IS_SHOWN, buffer, BUFFER_SIZE);
		*	if(result == MAW_RES_OK && strcmp(buffer, "true") == 0)
		*	{
		*		// Screen is visible.
		*	}
		* \endcode
		*/
		IS_SHOWN = "isShown";

        /**
        * @brief Remove all the navigation bars on a specific side.
        *
        * @validvalue A widget handle to a navigation bar button widget.
        *
        * @setonly
        *
        * @par Example
        * \code
        *   maWidgetSetProperty(screenHandle, REMOVE_NAV_BAR_BUTTON_WIDGET, navBarButtonWidgetHandle);
        * \endcode
        */
        REMOVE_NAV_BAR_BUTTON_WIDGET = "removeNavBarButtonWidget";

        /**
        * @brief Remove all the navigation bars on a specific side.
        *
        * @validvalue MAW_SCREEN_NAV_BAR_SIDE_RIGHT or MAW_SCREEN_NAV_BAR_SIDE_RIGHT depending on the side to clear
        *
        * @setonly
        *
        * @par Example
        * \code
        *   maWidgetSetProperty(screenHandle, MAW_SCREEN_REMOVE_NAV_BAR_BUTTONS, MAW_SCREEN_NAV_BAR_SIDE_RIGHT);
        * \endcode
        */
        REMOVE_NAV_BAR_BUTTONS = "removeNavBarButtons";
	}

    constset int MAW_SCREEN_NAV_BAR_ {
		/**
		* @brief Represents the right side of the title in the navigation bar.
		*/
        SIDE_RIGHT = 1;

		/**
		* @brief Represents the left side of the title in the navigation bar.
		*/
        SIDE_LEFT  = 2;
    }
} // end of WidgetScreenProperties
