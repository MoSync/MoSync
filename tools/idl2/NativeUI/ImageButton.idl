/**
* The available widget properties for a #MAW_IMAGE_BUTTON. See \ref WidgetProperties "Widget properties" for more properties.
*/
group WidgetImageButtonProperties "Image button" {
	constset MAString MAW_IMAGE_BUTTON_ {
		/**
		* @brief Sets or gets the text that is displayed in the label.
		* Note: It is not available on Android, as native image buttons do not have text attached.
		* @validvalue A null-terminated string.
		*
		* @setandget
		*
		* @par Example set
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_TEXT, "My button");
		* \endcode
		*
		* @par Example get
		* \code
		*	char textBuffer[BUFFER_SIZE];
		*	int result = maWidgetGetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_TEXT, textBuffer, BUFFER_SIZE);
		*	if (result > 0)
		*	{
		*		// Do something with the label text.
		*	}
		* \endcode
		*/
		TEXT = "text";

		/**
		* @brief Sets the vertical alignment of the text inside the button. If the widget's height is WRAP_CONTENT this property has no effect.
		*
		* @validvalue One of the constants #MAW_ALIGNMENT_TOP, #MAW_ALIGNMENT_CENTER or #MAW_ALIGNMENT_BOTTOM.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_TEXT_VERTICAL_ALIGNMENT, MAW_ALIGNMENT_CENTER);
		* \endcode
		*/
		TEXT_VERTICAL_ALIGNMENT = "textVerticalAlignment";

		/**
		* @brief Sets the horizontal alignment of the text inside the button. If the widget's height is WRAP_CONTENT this property has no effect.
		*
		* @validvalue Takes one of the constants #MAW_ALIGNMENT_TOP, #MAW_ALIGNMENT_CENTER or #MAW_ALIGNMENT_BOTTOM.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_TEXT_HORIZONTAL_ALIGNMENT, MAW_ALIGNMENT_CENTER);
		* \endcode
		*/
		TEXT_HORIZONTAL_ALIGNMENT = "textHorizontalAlignment";

		/**
		* @brief Sets the font color of the button's text.
		*
		* @validvalue A hexadecimal value 0xRRGGBB, where R, G and B are the red, green and blue components respectively.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_FONT_COLOR, "0xff0000");
		* \endcode
		*/
		FONT_COLOR = "fontColor";

		/**
		* @brief Sets the font size in points of the button's text.
		*
		* @validvalue A float that specifies the number of pixels on Android
		* and WP7, and number of points on iOS.
		*
		* @setonly
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_FONT_SIZE, "13.0");
		* \endcode
		*/
		FONT_SIZE = "fontSize";

		/**
		* Sets or gets the background image. This will be scaled to fit the whole widget (not keeping the aspect).
		* Setting this property will change #MAW_IMAGE_BUTTON_BACKGROUND_IMAGE_PATH property
		* value to an empty string.
		*
		* @validvalue MoSync handle to an uncompressed image resource.
		*
		* @setandget
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_BACKGROUND_IMAGE, toString(R_MY_IMAGE));
		* \endcode
		*/
		BACKGROUND_IMAGE = "backgroundImage";

		/**
		* Sets or gets the foreground image of the button. This won't be scaled at all.
		* Setting this property will change #MAW_IMAGE_BUTTON_IMAGE_PATH property
		* value to an empty string.
		*
		* @validvalue MoSync handle to an uncompressed image resource.
		*
		* @setandget
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_IMAGE, toString(R_MY_IMAGE));
		* \endcode
		*/
		IMAGE = "image";

		/**
		* Sets or gets a path to a image file that will be displayed by the widget
		* as a foreground image.
		* Setting this property will change #MAW_IMAGE_BUTTON_IMAGE property value to zero.
		*
		* @validvalue A valid path to an image file.
		*
		* @setandget
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_IMAGE_PATH, "file_path.png");
		* \endcode
		*/
		IMAGE_PATH = "imagePath";

		/**
		* Sets or gets a path to a image file that will be displayed by the widget
		* as a background image.
		* Setting this property will change #MAW_IMAGE_BUTTON_BACKGROUND_IMAGE property value to zero.
		*
		* @validvalue A valid path to an image file.
		*
		* @setandget
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_BACKGROUND_IMAGE_PATH, "file_path.png");
		* \endcode
		*/
		BACKGROUND_IMAGE_PATH = "backgroundImagePath";

		/**
		* @brief Sets the typeface and style in which the text should be displayed.
		*
		* @validvalue A font handle received from loading fonts using
		* #maFontGetName and #maFontLoadWithName syscalls.
		* Note: It is not available on Android, as native image buttons do not have text attached.
		* @setonly
		*
		* @par Example
		* \code
		*	int nrFonts = maFontGetCount();
		*	 char buf[256];
		*	 // Get first font name.
		*	 maFontGetName(1, buf, 256);
		*	 // Load that font for size 10.
		*	 int fontHandle = maFontLoadWithName(buf, 10);
		*	 // Set that font to the label.
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_FONT_HANDLE, toString(fontHandle));
		* \endcode
		*/
		FONT_HANDLE = "fontHandle";

		/**
		* Sets or gets the image that will be displayed by the widget
		* after user clicks on it. On iOS platform this property is named highlighted state.
		* If this property is set when the user taps on the widget, its background image will
		* be replaced by the image set here.
		* Setting this property will reset the #MAW_IMAGE_BUTTON_PRESSED_IMAGE_PATH value.
		*
		* @validvalue A valid image handle.
		*
		* @setandget
		*
		* @par Example
		* \code
		* char buffer[BUFFER_SIZE];
		* sprintf(buffer, "%d", handle);
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_PRESSED_IMAGE, buffer);
		* \endcode
		*/
		PRESSED_IMAGE = "pressedImage";

		/**
		* Sets or gets a path to a image file that will be displayed by the widget
		* after user clicks on it. On iOS platform this property is named highlighted state.
		* If this property is set when the user taps on the widget, its background image will
		* be replaced by the image set here.
		* Setting this property will reset the #MAW_IMAGE_BUTTON_PRESSED_IMAGE value.
		*
		* @validvalue A valid path to an image file.
		*
		* @setandget
		*
		* @par Example
		* \code
		*	maWidgetSetProperty(imageButtonHandle, MAW_IMAGE_BUTTON_PRESSED_IMAGE_PATH, "file_path.png");
		* \endcode
		*/
		PRESSED_IMAGE_PATH = "pressedImagePath";
	}
} // end of WidgetImageButtonProperties
